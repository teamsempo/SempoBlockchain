"""empty message
Revision ID: 1176fec745c0
Revises: a82a9b16e320
Create Date: 2019-10-21 11:14:09.649216
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1176fec745c0'
down_revision = 'a82a9b16e320'
branch_labels = None
depends_on = None

old_options = ('PAYMENT', 'DISBURSEMENT', 'WITHDRAWAL')
new_options = ('PAYMENT', 'DEPOSIT', 'WITHDRAWAL', 'EXCHANGE')
tmp_options = sorted(old_options + ('DEPOSIT', 'EXCHANGE'))

old_type = sa.Enum(*old_options, name='transfertypeenum')
new_type = sa.Enum(*new_options, name='transfertypeenum')
tmp_type = sa.Enum(*tmp_options, name='_transfertypeenum')

tcr = sa.sql.table('credit_transfer',
                   sa.Column('transfer_type', new_type, nullable=False))


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('credit_transfer', sa.Column('transfer_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))

    # Create a tempoary "_status" type, convert and drop the "old" type
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE credit_transfer ALTER COLUMN transfer_type TYPE _transfertypeenum'
               ' USING transfer_type::text::_transfertypeenum')

    # Convert 'DISBURSEMENT' transfer_type into 'DEPOSIT'
    op.execute(tcr.update().where(tcr.c.transfer_type == u'DISBURSEMENT').values(transfer_type='DEPOSIT'))

    old_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type
    new_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE credit_transfer ALTER COLUMN transfer_type TYPE transfertypeenum'
               ' USING transfer_type::text::transfertypeenum')
    tmp_type.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('credit_transfer', 'transfer_metadata')

    # Create a tempoary "_transfer_type" type, convert and drop the "new" type
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE credit_transfer ALTER COLUMN transfer_type TYPE _transfertypeenum'
               ' USING transfer_type::text::_transfertypeenum')

    # Convert 'DEPOSIT' transfer_type into 'DISBURSEMENT'
    op.execute(tcr.update().where(tcr.c.transfer_type == u'DEPOSIT').values(transfer_type='DISBURSEMENT'))
    op.execute(tcr.update().where(tcr.c.transfer_type == u'EXCHANGE').values(transfer_type='PAYMENT'))

    new_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "old" transfer_type type
    old_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE credit_transfer ALTER COLUMN transfer_type TYPE transfertypeenum'
               ' USING transfer_type::text::transfertypeenum')
    tmp_type.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###