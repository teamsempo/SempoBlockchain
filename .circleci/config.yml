version: 2.0
jobs:
  build:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Generate Secrets Files
          command: |
            mkdir config_files/secret
            cd config_files
            python generate_secrets.py -n docker_test

      # First bring node modules up to date
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "~/project/app/package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Install Node
          command: |
            cd ./app
            npm install
      - save_cache:
          paths:
            - ~/project/app/node_modules
          key: node-v1-{{ .Branch }}-{{ checksum "~/project/app/package-lock.json" }}

      # Then, if the src or packages have changed run a new build
      - run:
          name: Generate Client Hash For This Build
          command: |
            find ~/project/app/client/ ~/project/app/package.json -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | head -n1 | awk '{print $1;}'  > ~/project/ThisClientHash.txt
      - restore_cache:
          keys:
            - client_build-v1-{{ checksum "~/project/ThisClientHash.txt" }}
      - run:
          # Only build if the hash of the client folder is different to that of the recovered cash.
          # In general, we could just check for the presence of a bundle in the dist folder,
          # (if a cache is recovered, it'll match) but this prevents bad things from happening
          # if someone accidentally added a bundle to dist, or ClientHash.txt file in the git repo
          name: Build JS client
          command: |
            cd ./app
            if [ -f ~/project/PrevClientHash.txt ] && [ "$(cat ~/project/PrevClientHash.txt)" == "$(cat ~/project/ThisClientHash.txt)" ]; then echo build found; else npm run build; fi
      - run:
          name: Generate New 'Previous Client Hash'
          command: |
            find ~/project/app/client/ ~/project/app/package.json -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | head -n1 | awk '{print $1;}'  > ~/project/PrevClientHash.txt
      - save_cache:
          paths:
            - ~/project/app/server/static/javascript/dist/
            - ~/project/PrevClientHash.txt
          key: client_build-v1-{{ checksum "~/project/ThisClientHash.txt" }}
      - run:
          name: Build application Docker images
          command: |
            export GIT_HASH=$CIRCLE_SHA1
            export IMAGE_TAG=$CIRCLE_SHA1
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml build --build-arg GIT_HASH=${CIRCLE_SHA1}
      - run:
          name: Save application Docker Images
          command: |
            mkdir docker-cache
            docker save $(docker images | grep  $CIRCLE_SHA1 | awk '{print $1 ":" $2 }') -o docker-cache/images.tar
      - persist_to_workspace:
          root: ~/project
          paths:
            - config_files/secret
            - app/node_modules
            - app/server/static/javascript/dist
            - docker-cache

  test:backend:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: Load Docker Images
          command: |
            docker load -i docker-cache/images.tar
      - run:
          name: Run Docker Tests
          command: |
            export GIT_HASH=$CIRCLE_SHA1
            export IMAGE_TAG=$CIRCLE_SHA1
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --exit-code-from app
  test:worker:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: ETH_WORKER_TEST
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: Load Docker Images
          command: |
            docker load -i docker-cache/images.tar
      - run:
          name: Run Docker Tests
          command: |
            export GIT_HASH=$CIRCLE_SHA1
            export IMAGE_TAG=$CIRCLE_SHA1
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --exit-code-from eth_worker
  test:frontend:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Frontend Tests
          command: |
            cd app
            npm run test:coverage
      - run:
          name: Upload coverage report to Codecov
          command: bash <(curl -s https://codecov.io/bash) -cF javascript
  deploy:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: Check deploy Authorisation
          command: |
            if [ -z "$AWS_ACCESS_KEY_ID" ]; then
              echo "No AWS_ACCESS_KEY_ID is set! Failing..."
              exit 1;
            fi
      - run:
          name: Load Docker Images
          command: |
            docker load -i docker-cache/images.tar

      - run:
          name: Prepare for pyth venv install
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          key: pydeps-v3-{{ .Branch }}-{{ checksum "~/project/.circleci/requirements.txt" }}
      - run:
          name: pip fix
          command: curl https://bootstrap.pypa.io/pip/3.6/get-pip.py | python
      - run:
          name: Setup AWS CLI
          command: |
            pip install -r ~/project/.circleci/requirements.txt
      - save_cache:
          key: pydeps-v3-{{ .Branch }}-{{ checksum "~/project/.circleci/requirements.txt" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      - run:
          name: Push Docker Image
          command: |
            eval $(aws ecr get-login --no-include-email --region ${REPOSITORY_REGION});
            docker tag server:${CIRCLE_SHA1} ${APP_REPOSITORY_URI}:server_${CIRCLE_SHA1}
            docker push ${APP_REPOSITORY_URI}:server_${CIRCLE_SHA1}
            docker tag eth_worker:${CIRCLE_SHA1} ${WORKER_REPOSITORY_URI}:eth_worker_${CIRCLE_SHA1}
            docker push ${WORKER_REPOSITORY_URI}:eth_worker_${CIRCLE_SHA1}
      - run:
          name: Add updated images to task definitions
          command: |
            sed "s|CIRCLE_SHA1|${CIRCLE_SHA1}|g;" ecs_app_task_config_template.json > ecs_app_task_config.json
            sed "s|CIRCLE_SHA1|${CIRCLE_SHA1}|g;" ecs_worker_task_config_template.json > ecs_app_worker_config.json
      - run:
          name: Remove old ECS task
          command: |
            aws ecs update-service --cluster devecs --service app --desired-count 0
            aws ecs update-service --cluster devecs --service worker-ecs --desired-count 0
      - run:
          name: Update ECS Task
          command: |
            aws ecs register-task-definition --cli-input-json file://ecs_app_task_config.json
            aws ecs register-task-definition --cli-input-json file://ecs_app_worker_config.json
      - run:
          name: Add capacity for new task
          command: |
            aws ecs update-service --cluster devecs --service app --desired-count 1
            aws ecs update-service --cluster devecs --service worker-ecs --desired-count 1

      - run:
          name: Deploy
          command: |
            aws ecs update-service --cluster devecs --service app --task-definition app --force-new-deployment
            aws ecs update-service --cluster devecs --service worker-ecs --task-definition worker --force-new-deployment

workflows:
  version: 2
  main_workflow:
    jobs:
      - build
      - test:backend:
          requires:
            - build
      - test:worker:
          requires:
            - build
      - test:frontend:
          requires:
            - build
      - deploy:
          filters:
            branches:
              only:
                - master
                - update-nginx
                - remove-redirects
          requires:
            - build
