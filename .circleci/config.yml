version: 2.0
jobs:
  build:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: download SOPS
          command: |
            wget https://github.com/mozilla/sops/releases/download/3.4.0/sops-3.4.0.linux -O ./sops
            chmod +x ./sops
      - run:
          name: Decrypt SOPS Secrets
          command: |
            mkdir config_files
            ./sops --decrypt .sempoconfig/common_config.ini > ./config_files/common_config.ini
            ./sops --decrypt .sempoconfig/docker_test_config.ini > ./config_files/docker_test_config.ini
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "~/project/app/package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Setup npm
          command: |
            cd app
            npm install

      - save_cache:
          paths:
            - ~/project/app/node_modules
          key: node-v1-{{ .Branch }}-{{ checksum "~/project/app/package-lock.json" }}

      - run:
          name: Recover Previous 6 Builds
          command: |
            if [ "$CIRCLE_BUILD_NUM" -gt 1 ]; then expr $CIRCLE_BUILD_NUM - 1 > BuildMinus1.txt; fi
            if [ "$CIRCLE_BUILD_NUM" -gt 2 ]; then expr $CIRCLE_BUILD_NUM - 2 > BuildMinus2.txt; fi
            if [ "$CIRCLE_BUILD_NUM" -gt 3 ]; then expr $CIRCLE_BUILD_NUM - 3 > BuildMinus3.txt; fi
            if [ "$CIRCLE_BUILD_NUM" -gt 4 ]; then expr $CIRCLE_BUILD_NUM - 4 > BuildMinus4.txt; fi
            if [ "$CIRCLE_BUILD_NUM" -gt 5 ]; then expr $CIRCLE_BUILD_NUM - 5 > BuildMinus5.txt; fi
            if [ "$CIRCLE_BUILD_NUM" -gt 6 ]; then expr $CIRCLE_BUILD_NUM - 6 > BuildMinus6.txt; fi
      - restore_cache:
          keys:
            - v5-{{ .Branch }}-{{ checksum "BuildMinus1.txt" }}
            - v5-{{ .Branch }}-{{ checksum "BuildMinus2.txt" }}
            - v5-{{ .Branch }}-{{ checksum "BuildMinus3.txt" }}
            - v5-{{ .Branch }}-{{ checksum "BuildMinus4.txt" }}
            - v5-{{ .Branch }}-{{ checksum "BuildMinus5.txt" }}
            - v5-{{ .Branch }}-{{ checksum "BuildMinus6.txt" }}
      - run:
          name: Load Docker image layer cache
          command: |
            set -o pipefail
            if [ -f ~/project/caches/server.tar.gz ]; then gunzip -c ~/project/caches/server.tar.gz | docker load; docker images; fi
            echo server
            if [ -f ~/project/caches/eth_worker.tar.gz ]; then gunzip -c ~/project/caches/eth_worker.tar.gz | docker load; docker images; fi
            echo eth_worker
            if [ -f ~/project/caches/proxy.tar.gz ]; then gunzip -c ~/project/caches/proxy.tar.gz | docker load; docker images; fi
            echo proxy
      - run:
          name: Build Node
          command: |
            cd ./app
            npm run build
            cd ../
      - run:
          name: Build application Docker images
          command: |
            docker build -t server . -f ./app/Dockerfile  --build-arg GIT_HASH=$CIRCLE_SHA1
            docker build -t eth_worker . -f ./eth_worker/Dockerfile
            docker build -t proxy ./proxy
      - run:
          name: Save Docker total image caches
          command: |
            sudo mkdir -p ~/project/imagecaches
            sudo chmod 777 -R ~/project/imagecaches

            docker save server:latest | gzip > ~/project/imagecaches/server.tar.gz
            docker save eth_worker:latest | gzip > ~/project/imagecaches/eth_worker.tar.gz
            docker save proxy:latest | gzip > ~/project/imagecaches/proxy.tar.gz

            sudo chmod 777 -R ~/project/imagecaches

      - run:
          name: Save Docker image layer cache
          command: |
            GIT_HASH=$(git rev-parse HEAD)
            sudo mkdir -p ~/project/caches
            sudo chmod 777 -R ~/project/caches
            # See here: https://github.com/mozmeao/snippets-service/pull/208/files
            # and here: https://stackoverflow.com/q/49965396
            # The build commands here will be completely cached, and so very quick
            #
            docker build -t server . -f ./app/Dockerfile --build-arg GIT_HASH=$CIRCLE_SHA1 | grep '\-\-\->' | grep -v 'Using cache' | sed -e 's/[ >-]//g' > /tmp/server_layers.txt
            docker build -t eth_worker . -f ./eth_worker/Dockerfile |  grep '\-\-\->' | grep -v 'Using cache' | sed -e 's/[ >-]//g' > /tmp/eth_worker_layers.txt
            docker build -t proxy ./proxy| grep '\-\-\->' | grep -v 'Using cache' | sed -e 's/[ >-]//g' > /tmp/proxy_layers.txt

            docker save $(cat /tmp/server_layers.txt) | gzip > ~/project/caches/server.tar.gz
            docker save $(cat /tmp/eth_worker_layers.txt) | gzip > ~/project/caches/eth_worker.tar.gz
            docker save $(cat /tmp/proxy_layers.txt) | gzip > ~/project/caches/proxy.tar.gz

            sudo chmod 777 -R ~/project/caches
      - run:
          name: Create Current Build Number
          command: |
            expr $CIRCLE_BUILD_NUM > CurrBuildNum.txt

      - save_cache:
          key: v5-{{ .Branch }}-{{ checksum "CurrBuildNum.txt" }}
          paths:
            - ~/project/caches
      - persist_to_workspace:
          root: ~/project
          paths:
            - imagecaches
  test:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at:  ~/project
      - run:
          name: Load Docker image layer cache
          command: |
            gunzip -c ~/project/imagecaches/server.tar.gz | docker load
            gunzip -c ~/project/imagecaches/eth_worker.tar.gz | docker load
            gunzip -c ~/project/imagecaches/proxy.tar.gz | docker load
      - run:
          name: Run Docker Tests
          command: |
            docker-compose up --exit-code-from app
  deploy:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at:  ~/project
      - run:
          name: Load Docker image layer cache
          command: |
            gunzip -c ~/project/imagecaches/server.tar.gz | docker load
            gunzip -c ~/project/imagecaches/eth_worker.tar.gz | docker load
            gunzip -c ~/project/imagecaches/proxy.tar.gz | docker load
      - run:
          name: Prepare for pyth venv install
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          key: pydeps-v3-{{ .Branch }}-{{ checksum "~/project/.circleci/requirements.txt" }}
      - run:
          name: pip fix
          command: curl https://bootstrap.pypa.io/get-pip.py | python
      - run:
          name: Setup AWS CLI
          command: |
            pip install -r ~/project/.circleci/requirements.txt
      - save_cache:
          key: pydeps-v3-{{ .Branch }}-{{ checksum "~/project/.circleci/requirements.txt" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      - run:
          name: Setup AWS EB Config
          command: |
            mkdir ./.elasticbeanstalk

            printf "branch-defaults:
              default:
               environment: blockchain-app-dev
            global:
             application_name: blockchain-app
             default_ec2_keyname: aws-eb
             default_platform: Multi-container Docker 18.03.1-ce (Generic)
             default_region: eu-west-1
             include_git_submodules: true
             workspace_type: Application" > ./.elasticbeanstalk/config.yml
      - run:
          name: Push Docker Image
          command: |
            REPOSITORY_URI=290492953667.dkr.ecr.ap-southeast-2.amazonaws.com/blockchaindemo

            eval $(aws ecr get-login --no-include-email --region ap-southeast-2);
            docker tag server:latest $REPOSITORY_URI:server
            docker push $REPOSITORY_URI:server
            docker tag proxy:latest $REPOSITORY_URI:proxy
            docker push $REPOSITORY_URI:proxy
            docker tag eth_worker:latest $REPOSITORY_URI:eth_worker
            docker push $REPOSITORY_URI:eth_worker

      - run:
          name: Deploy app to AWS Server via Docker
          command: |
            eb deploy blockchain-app-dev

workflows:
  version: 2
  main_workflow:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          filters:
            branches:
              only:
                - master
                - auto_topup
                - locking_strat
          requires:
            - test
