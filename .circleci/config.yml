version: 2.0
jobs:
  build:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Generate Secrets Files
          command: |
            mkdir config_files/secret
            cd config_files
            python generate_secrets.py -n docker_test

      # First bring node modules up to date
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "~/project/app/package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Install Node
          command: |
            cd ./app
            npm install
      - save_cache:
          paths:
            - ~/project/app/node_modules
          key: node-v1-{{ .Branch }}-{{ checksum "~/project/app/package-lock.json" }}

      # Then, if the src or packages have changed run a new build
      - run:
          name: Generate Client Hash For This Build
          command: |
            find ~/project/app/client/ ~/project/app/package.json -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum  > ~/project/ThisClientHash.txt
      - restore_cache:
          keys:
            - client_build-v1-{{ checksum "~/project/ThisClientHash.txt" }}
      - run:
          # Only build if the hash of the client folder is different to that of the recovered cash.
          # In general, we could just check for the presence of a bundle in the dist folder,
          # (if a cache is recovered, it'll match) but this prevents bad things from happening
          # if someone accidentally added a bundle to dist, or ClientHash.txt file in the git repo
          name: Build JS client
          command: |
            cd ./app
            if [ -f ~/project/PrevClientHash.txt ] && [ "$(cat ~/project/PrevClientHash.txt)" == "$(cat ~/project/ThisClientHash.txt)" ]; then echo build found; else npm run build; fi
      - run:
          name: Generate New 'Previous Client Hash'
          command: |
            find ~/project/app/client/ ~/project/app/package.json -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum  > ~/project/PrevClientHash.txt
      - save_cache:
          paths:
            - ~/project/app/server/static/javascript/dist/
            - ~/project/PrevClientHash.txt
          key: client_build-v1-{{ checksum "~/project/ThisClientHash.txt" }}
      - run:
          name: Build application Docker images
          command: |
            export GIT_HASH=$CIRCLE_SHA1
            export IMAGE_TAG=$CIRCLE_SHA1
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml build --build-arg GIT_HASH=${CIRCLE_SHA1}
      - persist_to_workspace:
          root: ~/project
          paths:
            - config_files/secret
            - app/node_modules
            - app/server/static/javascript/dist
  test:backend:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Docker Tests
          command: |
            export GIT_HASH=$CIRCLE_SHA1
            export IMAGE_TAG=$CIRCLE_SHA1
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --exit-code-from app
  test:worker:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: ETH_WORKER_TEST
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Docker Tests
          command: |
            export GIT_HASH=$CIRCLE_SHA1
            export IMAGE_TAG=$CIRCLE_SHA1
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --exit-code-from eth_worker
  test:frontend:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
        environment:
          CONTAINER_MODE: TEST
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Frontend Tests
          command: |
            cd app
            npm run test:coverage
      - run:
          name: Upload coverage report to Codecov
          command: bash <(curl -s https://codecov.io/bash) -cF javascript
  deploy:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.6-node
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/project
      - run:
          name: Check deploy Authorisation
          command: |
            if [ -z "$AWS_ACCESS_KEY_ID" ]; then
              echo "No AWS_ACCESS_KEY_ID is set! Failing..."
              exit 1;
            fi
      - run:
          name: Safety Build of Docker images
          command: |
            export GIT_HASH=$CIRCLE_SHA1
            export IMAGE_TAG=$CIRCLE_SHA1
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml build --build-arg GIT_HASH=$CIRCLE_SHA1

      - run:
          name: Prepare for pyth venv install
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          key: pydeps-v3-{{ .Branch }}-{{ checksum "~/project/.circleci/requirements.txt" }}
      - run:
          name: pip fix
          command: curl https://bootstrap.pypa.io/get-pip.py | python
      - run:
          name: Setup AWS CLI
          command: |
            pip install -r ~/project/.circleci/requirements.txt
      - save_cache:
          key: pydeps-v3-{{ .Branch }}-{{ checksum "~/project/.circleci/requirements.txt" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      - run:
          name: Setup AWS EB Config
          command: |
            mkdir ./.elasticbeanstalk

            printf "branch-defaults:
              default:
               environment: sempo-dev
            global:
             application_name: ${DEPLOY_APPLICATION_NAME}
             default_ec2_keyname: aws-eb
             default_platform: Multi-container Docker 18.03.1-ce (Generic)
             default_region: ${DEPLOY_REGION}
             include_git_submodules: true
             workspace_type: Application" > ./.elasticbeanstalk/config.yml
      - run:
          name: Push Docker Image
          command: |

            eval $(aws ecr get-login --no-include-email --region ${REPOSITORY_REGION});
            docker tag server:${CIRCLE_SHA1} ${REPOSITORY_URI}:server_${CIRCLE_SHA1}
            docker push ${REPOSITORY_URI}:server_${CIRCLE_SHA1}
            docker tag proxy:${CIRCLE_SHA1} ${REPOSITORY_URI}:proxy_${CIRCLE_SHA1}
            docker push ${REPOSITORY_URI}:proxy_${CIRCLE_SHA1}
            docker tag eth_worker:${CIRCLE_SHA1} ${REPOSITORY_URI}:eth_worker_${CIRCLE_SHA1}
            docker push ${REPOSITORY_URI}:eth_worker_${CIRCLE_SHA1}
            docker tag pgbouncer:${CIRCLE_SHA1} ${REPOSITORY_URI}:pgbouncer_${CIRCLE_SHA1}
            docker push ${REPOSITORY_URI}:pgbouncer_${CIRCLE_SHA1}
      - run:
          name: Create Dockerrun config file
          command: |
            sed "s|REPOSITORY_URI|${REPOSITORY_URI}|g; s|TAG_SUFFIX|${CIRCLE_SHA1}|g" awsDockerrunTemplate.json > Dockerrun.aws.json

      - run:
          name: Deploy app to AWS Server via Docker
          command: |
            eb deploy ${DEPLOY_ENV}

workflows:
  version: 2
  main_workflow:
    jobs:
      - build
      - test:backend:
          requires:
            - build
      - test:worker:
          requires:
            - build
      - test:frontend:
          requires:
            - build
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - test:backend
            - test:worker
            - test:frontend
